(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[35],{

/***/ "./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/hooper/dist/hooper.css":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--6-1!./node_modules/postcss-loader/src??ref--6-2!./node_modules/hooper/dist/hooper.css ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \".hooper-slide {\\n  flex-shrink: 0;\\n  height: 100%;\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n}\\n\\n.hooper-progress {\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  left: 0;\\n  height: 4px;\\n  background-color: #efefef;\\n}\\n\\n.hooper-progress-inner {\\n  height: 100%;\\n  background-color: #4285f4;\\n  transition: 300ms;\\n}\\n\\n.hooper-pagination {\\n  position: absolute;\\n  bottom: 0;\\n  right: 50%;\\n  transform: translateX(50%);\\n  display: flex;\\n  padding: 5px 10px;\\n}\\n\\n.hooper-indicators {\\n  display: flex;\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.hooper-indicator:hover,\\n.hooper-indicator.is-active {\\n  background-color: #4285f4;\\n}\\n\\n.hooper-indicator {\\n  margin: 0 2px;\\n  width: 12px;\\n  height: 4px;\\n  border-radius: 4px;\\n  border: none;\\n  padding: 0;\\n  background-color: #fff;\\n  cursor: pointer;\\n}\\n\\n.hooper-pagination.is-vertical {\\n  bottom: auto;\\n  right: 0;\\n  top: 50%;\\n  transform: translateY(-50%);\\n}\\n\\n.hooper-pagination.is-vertical .hooper-indicators {\\n  flex-direction: column;\\n}\\n\\n.hooper-pagination.is-vertical .hooper-indicator {\\n  width: 6px;\\n}\\n\\n.hooper-next,\\n.hooper-prev {\\n  background-color: transparent;\\n  border: none;\\n  padding: 1em;\\n  position: absolute;\\n  top: 50%;\\n  transform: translateY(-50%);\\n  cursor: pointer;\\n}\\n\\n.hooper-next.is-disabled,\\n.hooper-prev.is-disabled {\\n  opacity: 0.3;\\n  cursor: not-allowed;\\n}\\n\\n.hooper-next {\\n  right: 0;\\n}\\n\\n.hooper-prev {\\n  left: 0;\\n}\\n\\n.hooper-navigation.is-vertical .hooper-next {\\n  top: auto;\\n  bottom: 0;\\n  transform: initial;\\n}\\n\\n.hooper-navigation.is-vertical .hooper-prev {\\n  top: 0;\\n  bottom: auto;\\n  right: 0;\\n  left: auto;\\n  transform: initial;\\n}\\n\\n.hooper-navigation.is-rtl .hooper-prev {\\n  left: auto;\\n  right: 0;\\n}\\n\\n.hooper-navigation.is-rtl .hooper-next {\\n  right: auto;\\n  left: 0;\\n}\\n\\n.hooper {\\n  position: relative;\\n  box-sizing: border-box;\\n  width: 100%;\\n  height: 200px;\\n}\\n\\n.hooper * {\\n  box-sizing: border-box;\\n}\\n\\n.hooper-list {\\n  overflow: hidden;\\n  width: 100%;\\n  height: 100%;\\n}\\n\\n.hooper-track {\\n  display: flex;\\n  box-sizing: border-box;\\n  width: 100%;\\n  height: 100%;\\n  padding: 0;\\n  margin: 0;\\n}\\n\\n.hooper.is-vertical .hooper-track {\\n  flex-direction: column;\\n  height: 200px;\\n}\\n\\n.hooper.is-rtl {\\n  direction: rtl;\\n}\\n\\n.hooper-sr-only {\\n  position: absolute;\\n  width: 1px;\\n  height: 1px;\\n  padding: 0;\\n  margin: -1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0);\\n  border: 0;\\n}\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9vcGVyL2Rpc3QvaG9vcGVyLmNzcz8yZDljIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJCQUEyQixtQkFBTyxDQUFDLG1GQUFrQztBQUNyRTs7O0FBR0E7QUFDQSxjQUFjLFFBQVMsa0JBQWtCLG1CQUFtQixpQkFBaUIsY0FBYyxlQUFlLHFCQUFxQixHQUFHLHNCQUFzQix1QkFBdUIsV0FBVyxhQUFhLFlBQVksZ0JBQWdCLDhCQUE4QixHQUFHLDRCQUE0QixpQkFBaUIsOEJBQThCLHNCQUFzQixHQUFHLHdCQUF3Qix1QkFBdUIsY0FBYyxlQUFlLCtCQUErQixrQkFBa0Isc0JBQXNCLEdBQUcsd0JBQXdCLGtCQUFrQixxQkFBcUIsY0FBYyxlQUFlLEdBQUcsMkRBQTJELDhCQUE4QixHQUFHLHVCQUF1QixrQkFBa0IsZ0JBQWdCLGdCQUFnQix1QkFBdUIsaUJBQWlCLGVBQWUsMkJBQTJCLG9CQUFvQixHQUFHLG9DQUFvQyxpQkFBaUIsYUFBYSxhQUFhLGdDQUFnQyxHQUFHLHVEQUF1RCwyQkFBMkIsR0FBRyxzREFBc0QsZUFBZSxHQUFHLGlDQUFpQyxrQ0FBa0MsaUJBQWlCLGlCQUFpQix1QkFBdUIsYUFBYSxnQ0FBZ0Msb0JBQW9CLEdBQUcseURBQXlELGlCQUFpQix3QkFBd0IsR0FBRyxrQkFBa0IsYUFBYSxHQUFHLGtCQUFrQixZQUFZLEdBQUcsaURBQWlELGNBQWMsY0FBYyx1QkFBdUIsR0FBRyxpREFBaUQsV0FBVyxpQkFBaUIsYUFBYSxlQUFlLHVCQUF1QixHQUFHLDRDQUE0QyxlQUFlLGFBQWEsR0FBRyw0Q0FBNEMsZ0JBQWdCLFlBQVksR0FBRyxhQUFhLHVCQUF1QiwyQkFBMkIsZ0JBQWdCLGtCQUFrQixHQUFHLGVBQWUsMkJBQTJCLEdBQUcsa0JBQWtCLHFCQUFxQixnQkFBZ0IsaUJBQWlCLEdBQUcsbUJBQW1CLGtCQUFrQiwyQkFBMkIsZ0JBQWdCLGlCQUFpQixlQUFlLGNBQWMsR0FBRyx1Q0FBdUMsMkJBQTJCLGtCQUFrQixHQUFHLG9CQUFvQixtQkFBbUIsR0FBRyxxQkFBcUIsdUJBQXVCLGVBQWUsZ0JBQWdCLGVBQWUsaUJBQWlCLHFCQUFxQiwyQkFBMkIsY0FBYyxHQUFHOztBQUU1K0UiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPyEuL25vZGVfbW9kdWxlcy9ob29wZXIvZGlzdC9ob29wZXIuY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5ob29wZXItc2xpZGUge1xcbiAgZmxleC1zaHJpbms6IDA7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuXFxuLmhvb3Blci1wcm9ncmVzcyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGxlZnQ6IDA7XFxuICBoZWlnaHQ6IDRweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZmVmZWY7XFxufVxcblxcbi5ob29wZXItcHJvZ3Jlc3MtaW5uZXIge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzQyODVmNDtcXG4gIHRyYW5zaXRpb246IDMwMG1zO1xcbn1cXG5cXG4uaG9vcGVyLXBhZ2luYXRpb24ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAwO1xcbiAgcmlnaHQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCg1MCUpO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBhZGRpbmc6IDVweCAxMHB4O1xcbn1cXG5cXG4uaG9vcGVyLWluZGljYXRvcnMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG4uaG9vcGVyLWluZGljYXRvcjpob3ZlcixcXG4uaG9vcGVyLWluZGljYXRvci5pcy1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzQyODVmNDtcXG59XFxuXFxuLmhvb3Blci1pbmRpY2F0b3Ige1xcbiAgbWFyZ2luOiAwIDJweDtcXG4gIHdpZHRoOiAxMnB4O1xcbiAgaGVpZ2h0OiA0cHg7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBib3JkZXI6IG5vbmU7XFxuICBwYWRkaW5nOiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmhvb3Blci1wYWdpbmF0aW9uLmlzLXZlcnRpY2FsIHtcXG4gIGJvdHRvbTogYXV0bztcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxufVxcblxcbi5ob29wZXItcGFnaW5hdGlvbi5pcy12ZXJ0aWNhbCAuaG9vcGVyLWluZGljYXRvcnMge1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuLmhvb3Blci1wYWdpbmF0aW9uLmlzLXZlcnRpY2FsIC5ob29wZXItaW5kaWNhdG9yIHtcXG4gIHdpZHRoOiA2cHg7XFxufVxcblxcbi5ob29wZXItbmV4dCxcXG4uaG9vcGVyLXByZXYge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IG5vbmU7XFxuICBwYWRkaW5nOiAxZW07XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmhvb3Blci1uZXh0LmlzLWRpc2FibGVkLFxcbi5ob29wZXItcHJldi5pcy1kaXNhYmxlZCB7XFxuICBvcGFjaXR5OiAwLjM7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbn1cXG5cXG4uaG9vcGVyLW5leHQge1xcbiAgcmlnaHQ6IDA7XFxufVxcblxcbi5ob29wZXItcHJldiB7XFxuICBsZWZ0OiAwO1xcbn1cXG5cXG4uaG9vcGVyLW5hdmlnYXRpb24uaXMtdmVydGljYWwgLmhvb3Blci1uZXh0IHtcXG4gIHRvcDogYXV0bztcXG4gIGJvdHRvbTogMDtcXG4gIHRyYW5zZm9ybTogaW5pdGlhbDtcXG59XFxuXFxuLmhvb3Blci1uYXZpZ2F0aW9uLmlzLXZlcnRpY2FsIC5ob29wZXItcHJldiB7XFxuICB0b3A6IDA7XFxuICBib3R0b206IGF1dG87XFxuICByaWdodDogMDtcXG4gIGxlZnQ6IGF1dG87XFxuICB0cmFuc2Zvcm06IGluaXRpYWw7XFxufVxcblxcbi5ob29wZXItbmF2aWdhdGlvbi5pcy1ydGwgLmhvb3Blci1wcmV2IHtcXG4gIGxlZnQ6IGF1dG87XFxuICByaWdodDogMDtcXG59XFxuXFxuLmhvb3Blci1uYXZpZ2F0aW9uLmlzLXJ0bCAuaG9vcGVyLW5leHQge1xcbiAgcmlnaHQ6IGF1dG87XFxuICBsZWZ0OiAwO1xcbn1cXG5cXG4uaG9vcGVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMjAwcHg7XFxufVxcblxcbi5ob29wZXIgKiB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4uaG9vcGVyLWxpc3Qge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4uaG9vcGVyLXRyYWNrIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4uaG9vcGVyLmlzLXZlcnRpY2FsIC5ob29wZXItdHJhY2sge1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGhlaWdodDogMjAwcHg7XFxufVxcblxcbi5ob29wZXIuaXMtcnRsIHtcXG4gIGRpcmVjdGlvbjogcnRsO1xcbn1cXG5cXG4uaG9vcGVyLXNyLW9ubHkge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDFweDtcXG4gIGhlaWdodDogMXB4O1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogLTFweDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBjbGlwOiByZWN0KDAsIDAsIDAsIDApO1xcbiAgYm9yZGVyOiAwO1xcbn1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/hooper/dist/hooper.css\n");

/***/ }),

/***/ "./node_modules/hooper/dist/hooper.css":
/*!*********************************************!*\
  !*** ./node_modules/hooper/dist/hooper.css ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../../css-loader??ref--6-1!../../postcss-loader/src??ref--6-2!./hooper.css */ \"./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/hooper/dist/hooper.css\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../../style-loader/lib/addStyles.js */ \"./node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9vcGVyL2Rpc3QvaG9vcGVyLmNzcz8zYjYxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxjQUFjLG1CQUFPLENBQUMsME1BQWdHOztBQUV0SCw0Q0FBNEMsUUFBUzs7QUFFckQ7QUFDQTs7OztBQUlBLGVBQWU7O0FBRWY7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMseUZBQXNDOztBQUUzRDs7QUFFQSxHQUFHLEtBQVUsRUFBRSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9ob29wZXIvZGlzdC9ob29wZXIuY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNi0xIS4uLy4uL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS02LTIhLi9ob29wZXIuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNi0xIS4uLy4uL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS02LTIhLi9ob29wZXIuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS02LTEhLi4vLi4vcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTYtMiEuL2hvb3Blci5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/hooper/dist/hooper.css\n");

/***/ }),

/***/ "./node_modules/hooper/dist/hooper.esm.js":
/*!************************************************!*\
  !*** ./node_modules/hooper/dist/hooper.esm.js ***!
  \************************************************/
/*! exports provided: default, Hooper, Icon, Navigation, Pagination, Progress, Slide, addonMixin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Hooper\", function() { return Carousel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Icon\", function() { return Icon; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Navigation\", function() { return Navigation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Pagination\", function() { return Pagination; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Progress\", function() { return Progress; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Slide\", function() { return Slide; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addonMixin\", function() { return Mixin; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm.js\");\n/**\n  * Hopper 0.3.4\n  * (c) 2019\n    * @license MIT\n    */\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction getInRange(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\nfunction now() {\n  return Date.now();\n}\nfunction Timer(callback, time) {\n  this.create = function createTimer() {\n    return window.setInterval(callback, time);\n  };\n\n  this.stop = function stopTimer() {\n    if (this.timer) {\n      window.clearInterval(this.timer);\n      this.timer = null;\n    }\n  };\n\n  this.start = function startTimer() {\n    if (!this.timer) {\n      this.timer = this.create();\n    }\n  };\n\n  this.restart = function restartTimer(newTime) {\n    time = newTime || time;\n    this.stop();\n    this.start();\n  };\n\n  this.timer = this.create();\n}\nfunction camelCaseToString(camelCase) {\n  camelCase = camelCase.replace(/([A-Z]+)/g, ' $1');\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}\nfunction normalizeSlideIndex(index, slidesCount) {\n  var realIndex;\n\n  if (index < 0) {\n    realIndex = (index + slidesCount) % slidesCount;\n  } else {\n    realIndex = index % slidesCount;\n  } // Test for NaN\n\n\n  if (realIndex !== realIndex) {\n    return 0;\n  }\n\n  return realIndex;\n}\nfunction cloneNode(h, vNode) {\n  // use the context that the original vnode was created in.\n  var children = vNode.children || vNode.componentOptions.children || vNode.text;\n  var tag = vNode.componentOptions.Ctor;\n  return h(tag, vNode.data, children);\n} // IE11 :)\n\nfunction assignPoly(target) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert first argument to object');\n  }\n\n  var to = Object(target);\n\n  for (var i = 1; i < arguments.length; i++) {\n    var nextSource = arguments[i];\n\n    if (nextSource === undefined || nextSource === null) {\n      continue;\n    }\n\n    nextSource = Object(nextSource);\n    var keysArray = Object.keys(Object(nextSource));\n\n    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n      var nextKey = keysArray[nextIndex];\n      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n\n      if (desc !== undefined && desc.enumerable) {\n        to[nextKey] = nextSource[nextKey];\n      }\n    }\n  }\n\n  return to;\n}\n\nvar assign = Object.assign || assignPoly;\n\nfunction signPoly(value) {\n  if (value < 0) {\n    return -1;\n  }\n\n  return value > 0 ? 1 : 0;\n}\n\nvar sign = Math.sign || signPoly;\nfunction normalizeChildren(context) {\n  var slotProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (context.$scopedSlots.default) {\n    return context.$scopedSlots.default(slotProps) || [];\n  }\n\n  return context.$slots.default || [];\n}\n\nvar EMITTER = new vue__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\nvar Carousel = {\n  name: 'Hooper',\n  provide: function provide() {\n    return {\n      $hooper: this\n    };\n  },\n  props: {\n    // count of items to showed per view\n    itemsToShow: {\n      default: 1,\n      type: Number\n    },\n    // count of items to slide when use navigation buttons\n    itemsToSlide: {\n      default: 1,\n      type: Number\n    },\n    // index number of initial slide\n    initialSlide: {\n      default: 0,\n      type: Number\n    },\n    // control infinite scrolling mode\n    infiniteScroll: {\n      default: false,\n      type: Boolean\n    },\n    // control center mode\n    centerMode: {\n      default: false,\n      type: Boolean\n    },\n    // vertical sliding mode\n    vertical: {\n      default: false,\n      type: Boolean\n    },\n    // enable rtl mode\n    rtl: {\n      default: null,\n      type: Boolean\n    },\n    // enable auto sliding to carousel\n    autoPlay: {\n      default: false,\n      type: Boolean\n    },\n    // speed of auto play to trigger slide\n    playSpeed: {\n      default: 2000,\n      type: Number\n    },\n    // toggle mouse dragging\n    mouseDrag: {\n      default: true,\n      type: Boolean\n    },\n    // toggle touch dragging\n    touchDrag: {\n      default: true,\n      type: Boolean\n    },\n    // toggle mouse wheel sliding\n    wheelControl: {\n      default: true,\n      type: Boolean\n    },\n    // toggle keyboard control\n    keysControl: {\n      default: true,\n      type: Boolean\n    },\n    // enable any move to commit a slide\n    shortDrag: {\n      default: true,\n      type: Boolean\n    },\n    // sliding transition time in ms\n    transition: {\n      default: 300,\n      type: Number\n    },\n    // pause autoPlay on mousehover\n    hoverPause: {\n      default: true,\n      type: Boolean\n    },\n    // remove empty space around slides\n    trimWhiteSpace: {\n      default: false,\n      type: Boolean\n    },\n    // an object to pass all settings\n    settings: {\n      default: function _default() {\n        return {};\n      },\n      type: Object\n    },\n    group: {\n      type: String,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      isDragging: false,\n      isSliding: false,\n      isTouch: false,\n      isHover: false,\n      isFocus: false,\n      initialized: false,\n      slideWidth: 0,\n      slideHeight: 0,\n      slidesCount: 0,\n      trimStart: 0,\n      trimEnd: 1,\n      currentSlide: null,\n      timer: null,\n      defaults: {},\n      breakpoints: {},\n      delta: {\n        x: 0,\n        y: 0\n      },\n      config: {}\n    };\n  },\n  computed: {\n    slideBounds: function slideBounds() {\n      var config = this.config,\n          currentSlide = this.currentSlide; // Because the \"isActive\" depends on the slides shown, not the number of slidable ones.\n      // but upper and lower bounds for Next,Prev depend on whatever is smaller.\n\n      var siblings = config.itemsToShow;\n      var lower = config.centerMode ? Math.ceil(currentSlide - siblings / 2) : currentSlide;\n      var upper = config.centerMode ? Math.floor(currentSlide + siblings / 2) : Math.floor(currentSlide + siblings - 1);\n      return {\n        lower: lower,\n        upper: upper\n      };\n    },\n    trackTransform: function trackTransform() {\n      var _this$config = this.config,\n          infiniteScroll = _this$config.infiniteScroll,\n          vertical = _this$config.vertical,\n          rtl = _this$config.rtl,\n          centerMode = _this$config.centerMode;\n      var direction = rtl ? -1 : 1;\n      var slideLength = vertical ? this.slideHeight : this.slideWidth;\n      var containerLength = vertical ? this.containerHeight : this.containerWidth;\n      var dragDelta = vertical ? this.delta.y : this.delta.x;\n      var clonesSpace = infiniteScroll ? slideLength * this.slidesCount : 0;\n      var centeringSpace = centerMode ? (containerLength - slideLength) / 2 : 0; // calculate track translate\n\n      var translate = dragDelta + direction * (centeringSpace - clonesSpace - this.currentSlide * slideLength);\n\n      if (vertical) {\n        return \"transform: translate(0, \".concat(translate, \"px);\");\n      }\n\n      return \"transform: translate(\".concat(translate, \"px, 0);\");\n    },\n    trackTransition: function trackTransition() {\n      if (this.initialized && this.isSliding) {\n        return \"transition: \".concat(this.config.transition, \"ms\");\n      }\n\n      return '';\n    }\n  },\n  watch: {\n    group: function group(val, oldVal) {\n      if (val === oldVal) {\n        return;\n      }\n\n      EMITTER.$off(\"slideGroup:\".concat(oldVal), this._groupSlideHandler);\n      this.addGroupListeners();\n    }\n  },\n  methods: {\n    // controlling methods\n    slideTo: function slideTo(slideIndex) {\n      var _this = this;\n\n      var isSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (this.isSliding || slideIndex === this.currentSlide) {\n        return;\n      }\n\n      this.$emit('beforeSlide', {\n        currentSlide: this.currentSlide,\n        slideTo: index\n      });\n      var _this$config2 = this.config,\n          infiniteScroll = _this$config2.infiniteScroll,\n          transition = _this$config2.transition;\n      var previousSlide = this.currentSlide;\n      var index = infiniteScroll ? slideIndex : getInRange(slideIndex, this.trimStart, this.slidesCount - this.trimEnd); // Notify others if in a group and is the slide event initiator.\n\n      if (this.group && isSource) {\n        EMITTER.$emit(\"slideGroup:\".concat(this.group), slideIndex);\n      }\n\n      this.currentSlide = index;\n      this.isSliding = true;\n      window.setTimeout(function () {\n        _this.isSliding = false;\n        _this.currentSlide = normalizeSlideIndex(index, _this.slidesCount);\n      }, transition);\n      this.$emit('slide', {\n        currentSlide: this.currentSlide,\n        slideFrom: previousSlide\n      });\n    },\n    slideNext: function slideNext() {\n      this.slideTo(this.currentSlide + this.config.itemsToSlide);\n    },\n    slidePrev: function slidePrev() {\n      this.slideTo(this.currentSlide - this.config.itemsToSlide);\n    },\n    initEvents: function initEvents() {\n      // get the element direction if not explicitly set\n      if (this.defaults.rtl === null) {\n        this.defaults.rtl = getComputedStyle(this.$el).direction === 'rtl';\n      }\n\n      if (this.config.autoPlay) {\n        this.initAutoPlay();\n      }\n\n      if (this.config.mouseDrag) {\n        this.$refs.list.addEventListener('mousedown', this.onDragStart);\n      }\n\n      if (this.config.touchDrag) {\n        this.$refs.list.addEventListener('touchstart', this.onDragStart, {\n          passive: true\n        });\n      }\n\n      if (this.config.keysControl) {\n        this.$el.addEventListener('keydown', this.onKeypress);\n      }\n\n      if (this.config.wheelControl) {\n        this.lastScrollTime = now();\n        this.$el.addEventListener('wheel', this.onWheel, {\n          passive: false\n        });\n      }\n\n      window.addEventListener('resize', this.update);\n    },\n    initAutoPlay: function initAutoPlay() {\n      var _this2 = this;\n\n      this.timer = new Timer(function () {\n        if (_this2.isSliding || _this2.isDragging || _this2.isHover && _this2.config.hoverPause || _this2.isFocus) {\n          return;\n        }\n\n        if (_this2.currentSlide === _this2.slidesCount - 1 && !_this2.config.infiniteScroll) {\n          _this2.slideTo(0);\n\n          return;\n        }\n\n        _this2.slideNext();\n      }, this.config.playSpeed);\n    },\n    initDefaults: function initDefaults() {\n      this.breakpoints = this.settings.breakpoints;\n      this.defaults = assign({}, this.$props, this.settings);\n      this.config = assign({}, this.defaults);\n    },\n    // updating methods\n    update: function update() {\n      if (this.breakpoints) {\n        this.updateConfig();\n      }\n\n      this.updateWidth();\n      this.updateTrim();\n      this.$emit('updated', {\n        containerWidth: this.containerWidth,\n        containerHeight: this.containerHeight,\n        slideWidth: this.slideWidth,\n        slideHeight: this.slideHeight,\n        settings: this.config\n      });\n    },\n    updateTrim: function updateTrim() {\n      var _this$config3 = this.config,\n          trimWhiteSpace = _this$config3.trimWhiteSpace,\n          itemsToShow = _this$config3.itemsToShow,\n          centerMode = _this$config3.centerMode,\n          infiniteScroll = _this$config3.infiniteScroll;\n\n      if (!trimWhiteSpace || infiniteScroll) {\n        this.trimStart = 0;\n        this.trimEnd = 1;\n        return;\n      }\n\n      this.trimStart = centerMode ? Math.floor((itemsToShow - 1) / 2) : 0;\n      this.trimEnd = centerMode ? Math.ceil(itemsToShow / 2) : itemsToShow;\n    },\n    updateWidth: function updateWidth() {\n      var rect = this.$el.getBoundingClientRect();\n      this.containerWidth = rect.width;\n      this.containerHeight = rect.height;\n\n      if (this.config.vertical) {\n        this.slideHeight = this.containerHeight / this.config.itemsToShow;\n        return;\n      }\n\n      this.slideWidth = this.containerWidth / this.config.itemsToShow;\n    },\n    updateConfig: function updateConfig() {\n      var _this3 = this;\n\n      var breakpoints = Object.keys(this.breakpoints).sort(function (a, b) {\n        return b - a;\n      });\n      var matched;\n      breakpoints.some(function (breakpoint) {\n        matched = window.matchMedia(\"(min-width: \".concat(breakpoint, \"px)\")).matches;\n\n        if (matched) {\n          _this3.config = assign({}, _this3.config, _this3.defaults, _this3.breakpoints[breakpoint]);\n          return true;\n        }\n      });\n\n      if (!matched) {\n        this.config = assign(this.config, this.defaults);\n      }\n    },\n    restartTimer: function restartTimer() {\n      if (this.timer) {\n        this.timer.restart();\n      }\n    },\n    restart: function restart() {\n      var _this4 = this;\n\n      this.$nextTick(function () {\n        _this4.update();\n      });\n    },\n    // events handlers\n    onDragStart: function onDragStart(event) {\n      this.isTouch = event.type === 'touchstart';\n\n      if (!this.isTouch && event.button !== 0) {\n        return;\n      }\n\n      this.startPosition = {\n        x: 0,\n        y: 0\n      };\n      this.endPosition = {\n        x: 0,\n        y: 0\n      };\n      this.isDragging = true;\n      this.startPosition.x = this.isTouch ? event.touches[0].clientX : event.clientX;\n      this.startPosition.y = this.isTouch ? event.touches[0].clientY : event.clientY;\n      document.addEventListener(this.isTouch ? 'touchmove' : 'mousemove', this.onDrag);\n      document.addEventListener(this.isTouch ? 'touchend' : 'mouseup', this.onDragEnd);\n    },\n    isInvalidDirection: function isInvalidDirection(deltaX, deltaY) {\n      if (!this.config.vertical) {\n        return Math.abs(deltaX) <= Math.abs(deltaY);\n      }\n\n      if (this.config.vertical) {\n        return Math.abs(deltaY) <= Math.abs(deltaX);\n      }\n\n      return false;\n    },\n    onDrag: function onDrag(event) {\n      if (this.isSliding) {\n        return;\n      }\n\n      this.endPosition.x = this.isTouch ? event.touches[0].clientX : event.clientX;\n      this.endPosition.y = this.isTouch ? event.touches[0].clientY : event.clientY;\n      var deltaX = this.endPosition.x - this.startPosition.x;\n      var deltaY = this.endPosition.y - this.startPosition.y; // Maybe scrolling.\n\n      if (this.isInvalidDirection(deltaX, deltaY)) {\n        return;\n      }\n\n      this.delta.y = deltaY;\n      this.delta.x = deltaX;\n\n      if (!this.isTouch) {\n        event.preventDefault();\n      }\n    },\n    onDragEnd: function onDragEnd() {\n      var tolerance = this.config.shortDrag ? 0.5 : 0.15;\n      this.isDragging = false;\n\n      if (this.config.vertical) {\n        var draggedSlides = Math.round(Math.abs(this.delta.y / this.slideHeight) + tolerance);\n        this.slideTo(this.currentSlide - sign(this.delta.y) * draggedSlides);\n      }\n\n      if (!this.config.vertical) {\n        var direction = (this.config.rtl ? -1 : 1) * sign(this.delta.x);\n\n        var _draggedSlides = Math.round(Math.abs(this.delta.x / this.slideWidth) + tolerance);\n\n        this.slideTo(this.currentSlide - direction * _draggedSlides);\n      }\n\n      this.delta.x = 0;\n      this.delta.y = 0;\n      document.removeEventListener(this.isTouch ? 'touchmove' : 'mousemove', this.onDrag);\n      document.removeEventListener(this.isTouch ? 'touchend' : 'mouseup', this.onDragEnd);\n      this.restartTimer();\n    },\n    onTransitionend: function onTransitionend() {\n      this.isSliding = false;\n      this.$emit('afterSlide', {\n        currentSlide: this.currentSlide\n      });\n    },\n    onKeypress: function onKeypress(event) {\n      var key = event.key;\n\n      if (key.startsWith('Arrow')) {\n        event.preventDefault();\n      }\n\n      if (this.config.vertical) {\n        if (key === 'ArrowUp') {\n          this.slidePrev();\n        }\n\n        if (key === 'ArrowDown') {\n          this.slideNext();\n        }\n\n        return;\n      }\n\n      if (this.config.rtl) {\n        if (key === 'ArrowRight') {\n          this.slidePrev();\n        }\n\n        if (key === 'ArrowLeft') {\n          this.slideNext();\n        }\n\n        return;\n      }\n\n      if (key === 'ArrowRight') {\n        this.slideNext();\n      }\n\n      if (key === 'ArrowLeft') {\n        this.slidePrev();\n      }\n    },\n    onWheel: function onWheel(event) {\n      event.preventDefault();\n\n      if (now() - this.lastScrollTime < 200) {\n        return;\n      } // get wheel direction\n\n\n      this.lastScrollTime = now();\n      var value = event.wheelDelta || -event.deltaY;\n      var delta = sign(value);\n\n      if (delta === -1) {\n        this.slideNext();\n      }\n\n      if (delta === 1) {\n        this.slidePrev();\n      }\n    },\n    addGroupListeners: function addGroupListeners() {\n      var _this5 = this;\n\n      if (!this.group) {\n        return;\n      }\n\n      this._groupSlideHandler = function (slideIndex) {\n        // set the isSource to false to prevent infinite emitting loop.\n        _this5.slideTo(slideIndex, false);\n      };\n\n      EMITTER.$on(\"slideGroup:\".concat(this.group), this._groupSlideHandler);\n    }\n  },\n  created: function created() {\n    this.initDefaults();\n  },\n  mounted: function mounted() {\n    var _this6 = this;\n\n    this.initEvents();\n    this.addGroupListeners();\n    this.$nextTick(function () {\n      _this6.update();\n\n      _this6.slideTo(_this6.config.initialSlide || 0);\n\n      setTimeout(function () {\n        _this6.$emit('loaded');\n\n        _this6.initialized = true;\n      }, _this6.transition);\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('resize', this.update);\n\n    if (this.group) {\n      EMITTER.$off(\"slideGroup:\".concat(this.group), this._groupSlideHandler);\n    }\n\n    if (this.timer) {\n      this.timer.stop();\n    }\n  },\n  render: function render(h) {\n    var _this7 = this;\n\n    var body = renderBody.call(this, h);\n    return h('section', {\n      class: {\n        hooper: true,\n        'is-vertical': this.config.vertical,\n        'is-rtl': this.config.rtl\n      },\n      attrs: {\n        tabindex: '0'\n      },\n      on: {\n        focusin: function focusin() {\n          return _this7.isFocus = true;\n        },\n        focusout: function focusout() {\n          return _this7.isFocus = false;\n        },\n        mouseover: function mouseover() {\n          return _this7.isHover = true;\n        },\n        mouseleave: function mouseleave() {\n          return _this7.isHover = false;\n        }\n      }\n    }, body);\n  }\n};\n/**\n * Renders additional slides for infinite slides mode.\n * By cloning Slides VNodes before and after either edges.\n */\n\nfunction renderBufferSlides(h, slides) {\n  var before = [];\n  var after = []; // reduce prop access\n\n  var slidesCount = slides.length;\n\n  for (var i = 0; i < slidesCount; i++) {\n    var slide = slides[i];\n    var clonedBefore = cloneNode(h, slide);\n    var slideIndex = i - slidesCount;\n    clonedBefore.data.key = \"before_\".concat(i);\n    clonedBefore.key = clonedBefore.data.key;\n    clonedBefore.componentOptions.propsData.index = slideIndex;\n    clonedBefore.data.props = {\n      index: slideIndex,\n      isClone: true\n    };\n    before.push(clonedBefore);\n    var clonedAfter = cloneNode(h, slide);\n    slideIndex = i + slidesCount;\n    clonedAfter.data.key = \"after_\".concat(slideIndex);\n    clonedAfter.componentOptions.propsData.index = slideIndex;\n    clonedAfter.key = clonedAfter.data.key;\n    clonedAfter.data.props = {\n      index: slideIndex,\n      isClone: true\n    };\n    after.push(clonedAfter);\n  }\n\n  return [].concat(before, _toConsumableArray(slides), after);\n}\n/**\n * Produces the VNodes for the Slides.\n * requires {this} to be bound to hooper.\n * So use with .call or .bind\n */\n\n\nfunction renderSlides(h) {\n  var children = normalizeChildren(this);\n  var childrenCount = children.length;\n  var idx = 0;\n  var slides = [];\n\n  for (var i = 0; i < childrenCount; i++) {\n    var child = children[i];\n    var ctor = child.componentOptions && child.componentOptions.Ctor;\n\n    if (!ctor || ctor.options.name !== 'HooperSlide') {\n      continue;\n    } // give slide an index behind the scenes\n\n\n    child.componentOptions.propsData.index = idx;\n    child.data.key = idx;\n    child.key = idx;\n    child.data.props = _objectSpread({}, child.data.props || {}, {\n      isClone: false,\n      index: idx++\n    });\n    slides.push(child);\n  } // update hooper's information of the slide count.\n\n\n  this.slidesCount = slides.length;\n\n  if (this.config.infiniteScroll) {\n    slides = renderBufferSlides(h, slides);\n  }\n\n  return h('ul', {\n    class: {\n      'hooper-track': true,\n      'is-dragging': this.isDragging\n    },\n    style: this.trackTransform + this.trackTransition,\n    ref: 'track',\n    on: {\n      transitionend: this.onTransitionend\n    }\n  }, slides);\n}\n/**\n * Builds the VNodes for the hooper body.\n * Which is the slides, addons if available, and a11y stuff.\n * REQUIRES {this} to be bound to the hooper instance.\n * use with .call or .bind\n */\n\n\nfunction renderBody(h) {\n  var slides = renderSlides.call(this, h);\n  var addons = this.$slots['hooper-addons'] || [];\n  var a11y = h('div', {\n    class: 'hooper-liveregion hooper-sr-only',\n    attrs: {\n      'aria-live': 'polite',\n      'aria-atomic': 'true'\n    }\n  }, \"Item \".concat(this.currentSlide + 1, \" of \").concat(this.slidesCount));\n  var children = [slides].concat(_toConsumableArray(addons), [a11y]);\n  return [h('div', {\n    class: 'hooper-list',\n    ref: 'list'\n  }, children)];\n}\n\nvar Slide = {\n  name: 'HooperSlide',\n  inject: ['$hooper'],\n  props: {\n    isClone: {\n      type: Boolean,\n      default: false\n    },\n    index: {\n      type: Number,\n      required: true\n    }\n  },\n  computed: {\n    style: function style() {\n      var _ref = this.$hooper || {},\n          config = _ref.config,\n          slideHeight = _ref.slideHeight,\n          slideWidth = _ref.slideWidth;\n\n      if (config.vertical) {\n        return \"height: \".concat(slideHeight, \"px\");\n      }\n\n      return \"width: \".concat(slideWidth, \"px\");\n    },\n    isActive: function isActive() {\n      var _this$$hooper$slideBo = this.$hooper.slideBounds,\n          upper = _this$$hooper$slideBo.upper,\n          lower = _this$$hooper$slideBo.lower;\n      return this.index >= lower && this.index <= upper;\n    },\n    isPrev: function isPrev() {\n      var lower = this.$hooper.slideBounds.lower;\n      var itemsToSlide = this.$hooper.config.itemsToSlide;\n      return this.index < lower && this.index >= lower - itemsToSlide;\n    },\n    isNext: function isNext() {\n      var upper = this.$hooper.slideBounds.upper;\n      var itemsToSlide = this.$hooper.config.itemsToSlide;\n      return this.index > upper && this.index <= upper + itemsToSlide;\n    },\n    isCurrent: function isCurrent() {\n      return this.index === this.$hooper.currentSlide;\n    }\n  },\n  render: function render(h) {\n    var classes = {\n      'hooper-slide': true,\n      'is-clone': this.isClone,\n      'is-active': this.isActive,\n      'is-prev': this.isPrev,\n      'is-next': this.isNext,\n      'is-current': this.isCurrent\n    };\n    var children = normalizeChildren(this);\n    return h('li', {\n      class: classes,\n      style: this.style,\n      attrs: {\n        'aria-hidden': !this.isActive\n      }\n    }, children);\n  }\n};\n\nvar Mixin = {\n  inject: ['$hooper']\n};\n\nvar icons = {\n  arrowUp: 'M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z',\n  arrowDown: 'M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z',\n  arrowRight: 'M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z',\n  arrowLeft: 'M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z'\n};\nvar Icon = {\n  name: 'HooperIcon',\n  functional: true,\n  inheritAttrs: true,\n  props: {\n    name: {\n      type: String,\n      required: true,\n      validator: function validator(val) {\n        return val in icons;\n      }\n    }\n  },\n  render: function render(createElement, _ref) {\n    var props = _ref.props;\n    var icon = icons[props.name];\n    var children = [];\n    children.push(createElement('title', camelCaseToString(props.name)));\n    children.push(createElement('path', {\n      attrs: {\n        d: 'M0 0h24v24H0z',\n        fill: 'none'\n      }\n    }));\n    children.push(createElement('path', {\n      attrs: {\n        d: icon\n      }\n    }));\n    return createElement('svg', {\n      attrs: {\n        class: \"icon icon-\".concat(props.name),\n        viewBox: '0 0 24 24',\n        width: '24px',\n        height: '24px'\n      }\n    }, children);\n  }\n};\n\nvar Progress = {\n  inject: ['$hooper'],\n  name: 'HooperProgress',\n  computed: {\n    currentSlide: function currentSlide() {\n      return normalizeSlideIndex(this.$hooper.currentSlide, this.$hooper.slidesCount);\n    },\n    progress: function progress() {\n      var range = this.$hooper.slidesCount - this.$hooper.trimStart - this.$hooper.trimEnd;\n      return (this.currentSlide - this.$hooper.trimStart) * 100 / range;\n    }\n  },\n  render: function render(h) {\n    return h('div', {\n      class: 'hooper-progress'\n    }, [h('div', {\n      class: 'hooper-progress-inner',\n      style: \"width: \".concat(this.progress, \"%\")\n    })]);\n  }\n};\n\nfunction renderFraction(h, current, totalCount) {\n  return [h('span', current + 1), h('span', '/'), h('span', totalCount)];\n}\n\nfunction renderIndicator(h, index, isCurrent, onClick) {\n  return h('li', [h('button', {\n    class: {\n      'hooper-indicator': true,\n      'is-active': isCurrent\n    },\n    on: {\n      click: onClick\n    },\n    attrs: {\n      type: 'button'\n    }\n  }, [h('span', {\n    class: 'hooper-sr-only'\n  }, \"item \".concat(index))])]);\n}\n\nfunction renderDefault(h, current, totalCount, slideToIndex) {\n  var children = [];\n\n  var _loop = function _loop(i) {\n    children.push(renderIndicator(h, i, i === current, function () {\n      return slideToIndex(i);\n    }));\n  };\n\n  for (var i = 0; i < totalCount; i++) {\n    _loop(i);\n  }\n\n  return [h('ol', {\n    class: 'hooper-indicators'\n  }, children)];\n}\n\nvar Pagination = {\n  inject: ['$hooper'],\n  name: 'HooperPagination',\n  props: {\n    mode: {\n      default: 'indicator',\n      type: String\n    }\n  },\n  computed: {\n    currentSlide: function currentSlide() {\n      return normalizeSlideIndex(this.$hooper.currentSlide, this.$hooper.slidesCount);\n    },\n    slides: function slides() {\n      var slides = this.$hooper.slides.map(function (_, index) {\n        return index;\n      });\n      return slides.slice(this.$hooper.trimStart, this.$hooper.slidesCount - this.$hooper.trimEnd + 1);\n    }\n  },\n  render: function render(h) {\n    var _this = this;\n\n    var totalCount = this.$hooper.slidesCount;\n    var children = this.mode === 'indicator' ? renderDefault(h, this.currentSlide, totalCount, function (index) {\n      return _this.$hooper.slideTo(index);\n    }) : renderFraction(h, this.currentSlide, totalCount);\n    return h('div', {\n      class: {\n        'hooper-pagination': true,\n        'is-vertical': this.$hooper.config.vertical\n      }\n    }, children);\n  }\n};\n\nfunction iconName(isVertical, isRTL, isPrev) {\n  if (isPrev) {\n    return isVertical ? 'arrowUp' : isRTL ? 'arrowRight' : 'arrowLeft';\n  }\n\n  return isVertical ? 'arrowDown' : isRTL ? 'arrowLeft' : 'arrowRight';\n}\n\nfunction renderButton(h, disabled, slot, isPrev, _ref, onClick) {\n  var _class;\n\n  var isVertical = _ref.isVertical,\n      isRTL = _ref.isRTL;\n  var children = slot && slot.length ? slot : [h(Icon, {\n    props: {\n      name: iconName(isVertical, isRTL, isPrev)\n    }\n  })];\n  return h('button', {\n    class: (_class = {}, _defineProperty(_class, \"hooper-\".concat(isPrev ? 'prev' : 'next'), true), _defineProperty(_class, 'is-disabled', disabled), _class),\n    attrs: {\n      type: 'button'\n    },\n    on: {\n      click: onClick\n    }\n  }, children);\n}\n\nvar Navigation = {\n  inject: ['$hooper'],\n  name: 'HooperNavigation',\n  computed: {\n    isPrevDisabled: function isPrevDisabled() {\n      if (this.$hooper.config.infiniteScroll) {\n        return false;\n      }\n\n      return this.$hooper.currentSlide === 0;\n    },\n    isNextDisabled: function isNextDisabled() {\n      if (this.$hooper.config.infiniteScroll) {\n        return false;\n      }\n\n      if (this.$hooper.config.trimWhiteSpace) {\n        return this.$hooper.currentSlide === this.$hooper.slidesCount - Math.min(this.$hooper.config.itemsToShow, this.$hooper.slidesCount);\n      }\n\n      return this.$hooper.currentSlide === this.$hooper.slidesCount - 1;\n    }\n  },\n  methods: {\n    slideNext: function slideNext() {\n      this.$hooper.slideNext();\n      this.$hooper.restartTimer();\n    },\n    slidePrev: function slidePrev() {\n      this.$hooper.slidePrev();\n      this.$hooper.restartTimer();\n    }\n  },\n  render: function render(h) {\n    var _this = this;\n\n    var config = {\n      isRTL: this.$hooper.config.rtl,\n      isVertical: this.$hooper.config.vertical\n    };\n    var children = [renderButton(h, this.isPrevDisabled, this.$slots['hooper-prev'], true, config, function () {\n      return _this.slidePrev();\n    }), renderButton(h, this.isNextDisabled, this.$slots['hooper-next'], false, config, function () {\n      return _this.slideNext();\n    })];\n    return h('div', {\n      class: {\n        'hooper-navigation': true,\n        'is-vertical': this.$hooper.config.vertical,\n        'is-rtl': this.$hooper.config.rtl\n      }\n    }, children);\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Carousel);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/hooper/dist/hooper.esm.js\n");

/***/ })

}]);